// <auto-generated />
using System;
using LooppieCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LooppieData.Migrations
{
    [DbContext(typeof(LooppieContext))]
    [Migration("20181119194710_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LooppieCore.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Explaination");

                    b.Property<int>("HitCount");

                    b.Property<Guid?>("QuestionId");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("LooppieCore.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<string>("Description");

                    b.Property<int>("HotRank");

                    b.Property<DateTime>("QuestionCreatTime");

                    b.Property<int>("SubCategory");

                    b.Property<Guid?>("SubmitterUserId");

                    b.HasKey("QuestionId");

                    b.HasIndex("SubmitterUserId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("LooppieCore.QuestionAnswerRecord", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Answer");

                    b.Property<Guid?>("AnswererUserId");

                    b.Property<Guid?>("QuestionId");

                    b.HasKey("ID");

                    b.HasIndex("AnswererUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswerRecord");
                });

            modelBuilder.Entity("LooppieCore.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ActiveUser");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("UserId1");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("User");
                });

            modelBuilder.Entity("LooppieCore.Answer", b =>
                {
                    b.HasOne("LooppieCore.Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("LooppieCore.Question", b =>
                {
                    b.HasOne("LooppieCore.User", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterUserId");
                });

            modelBuilder.Entity("LooppieCore.QuestionAnswerRecord", b =>
                {
                    b.HasOne("LooppieCore.User", "Answerer")
                        .WithMany()
                        .HasForeignKey("AnswererUserId");

                    b.HasOne("LooppieCore.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("LooppieCore.User", b =>
                {
                    b.HasOne("LooppieCore.User")
                        .WithMany("Friends")
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
